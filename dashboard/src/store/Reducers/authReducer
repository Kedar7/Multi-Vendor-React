import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

export const admin_login = createAsyncThunk(
    'auth/admin_login',
    async(info,{rejectWithValue, fulfillWithValue}) => {
        console.log(info)
        try {
            // const {data} = await api.post('/admin-login',info,{withCedentials: true})
            // console.log(data)
            // localStorage.setItem('accessToken',data.token)
        } catch (error) {
          console.log(error.response.data)
          // console.log(error.response.data)
          return rejectWithValue(error.response.data)
        }
    }
)

 const authReducer = createSlice({
    name: 'auth',
    initialState:{
        successMessage :  'dsd',
        errorMessage : 'dsd',
        loader: false,
        userInfo : ''
    },
    reducers : {
      messageClear : (state,_) => {
        state.errorMessage = "ddsd"
    }
    },
    extraReducers: (builder) => {
      builder
      .addCase(admin_login.pending, (state, { payload }) => {
          state.loader = true;
      }) 
      .addCase(admin_login.rejected, (state, { payload }) => {
        state.loader = false;
        state.errorMessage = payload.error
    })
    .addCase(admin_login.fulfilled,(state, {payload}) =>{
      state.loader = false;
      state.successMessage = payload.message;
    })
  }
})


export const {messageClear} = authReducer.actions
export default authReducer.reducer